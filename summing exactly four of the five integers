import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'miniMaxSum' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static void miniMaxSum(List<Integer> arr) {
    
    long sum[] = new long[arr.size()];
    int f=0;
    for(int i=0;i<arr.size();i++)
    {
        if((i+4)<=arr.size())
        {
            for(int j=i;j<(i+4);j++)
            {
                sum[f]=sum[f]+arr.get(j);   
            }
        }
      else if((i+4)>arr.size())
       {
            for(int k=i;k<arr.size();k++)
            {
              sum[f]=sum[f]+arr.get(k);
            }
            for(int j=0;j<=((i+4)-arr.size())-1;j++)
           {
              sum[f]=sum[f]+arr.get(j);
            }
        }
      f++;
    }
    long max=sum[0];
    long min=sum[0];
    for(int m=0;m<sum.length;m++)
    {
        if(max<sum[m])
        {
            max=sum[m];
        }
        if(min>sum[m])
        {
            min=sum[m];
        }
    }
    
    System.out.print(min+ " ");
    System.out.print(max);
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        Result.miniMaxSum(arr);

        bufferedReader.close();
    }
}
